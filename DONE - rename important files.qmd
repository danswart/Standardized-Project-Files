---
title: "CSS File Management Solutions for R Projects"
subtitle: "CSS Renaming Guide"
date: "`r Sys.Date()`"
# bibliography: manual-refs.bib
format:
  html:
    include-after-body: 
      - text: |
         <script type="text/javascript" src="reference-backlinks.js"></script>
    css: 
      - swart-20250709.css
    page-layout: full
    fig-width: 12
    fig-height: 10
    fig-dpi: 300
    df-print: paged
    code-overflow: wrap
    toc: true
    citeproc: true
    link-citations: true
  typst:
    fig-width: 12
    fig-height: 10
    fig-dpi: 300
    margin:
      x: 1in
      y: 1in
    toc: true
    fontsize: 14pt
    mainfont: "Latin Modern Roman"
execute:
  eval: false
  echo: true
  message: false
  warning: false
  fig-width: 12
  fig-height: 10
---


```{r}
#| label: setup
#| eval: true

# Core packages needed
library(shiny)     # For tags$, fluidPage, tagList, HTML, addResourcePath
library(tools)     # For md5sum() function
library(tidyverse) # General purpose
library(usethis)   # For create_package() function

# Set global theme for consistent plots
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 16) + 
          ggplot2::theme(
    plot.title = element_text(face = "bold", size = 24),    # adjust title size
    plot.subtitle = element_text(face = "bold", size = 20), # adjust subtitle size
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold"),
    axis.text = element_text(face = "bold"),
    legend.position = "bottom",
    strip.text = element_text(face = "bold"),
    panel.spacing.x = unit(1.5, "cm"),  # Horizontal spacing only
    panel.spacing.y = unit(1.5, "cm"),   # Vertical spacing only
    plot.margin = margin(20, 20, 20, 20, "pt")
   )
  )

# Set seed for reproducibility
set.seed(42)
```

# Overview

This document provides comprehensive solutions for managing CSS files across multiple R projects, transitioning from date-based naming (`swart-20250709.css`) to a simplified naming system (`swart.css`) with automatic version tracking.

---

# Summary and Recommendations

## Recommended Approach

1. **Immediate Action**: Run the pre-renaming backup function script
2. **Renaming**: Use the renaming script to rename all files from `swart-20250709.css` to `swart.css`
3. **Test**: Verify projects work with renamed files (keeping old content)
4. **Update Content**: If renaming works, update CSS content to latest version
5. **Version Tracking**: Implement the HTML comment approach
6. **Future Updates**: Use the `update_css_with_version_tracking()` function
7. **Long-term**: Consider moving to URL-based CSS for deployed apps

---

# Functions Needed


## FUNCTION to Backup All CSS Files

```{r}
#| label: backup-function-script
 
# Create backup of all CSS files before renaming
backup_css_files <- function(projects_root = "/Users/D/R Working Directory",
                            backup_dir = NULL,
                            pattern = "swart.*\\.css$") {  # Only backup swart CSS files
  
  if (is.null(backup_dir)) {
    # Create backup directory OUTSIDE the projects root to avoid recursive backups
    backup_dir <- file.path(dirname(projects_root), 
                           paste0("css_backup_", 
                                 format(Sys.time(), "%Y%m%d_%H%M%S")))
  }
  
  dir.create(backup_dir, showWarnings = FALSE)
  
  # Directories to exclude from search
  exclude_dirs <- c("css_backup", "node_modules", ".git", "renv", 
                    "packrat", "_cache", ".Rproj.user")
  
  # Find all CSS files matching our pattern
  all_files <- list.files(projects_root, 
                         pattern = pattern, 
                         recursive = TRUE, 
                         full.names = TRUE)
  
  # Filter out files in excluded directories
  css_files <- all_files[!grepl(paste0("/(", paste(exclude_dirs, collapse = "|"), ")/"), all_files)]
  
  cat("Backing up", length(css_files), "CSS files matching pattern '", pattern, "' to:\n", 
      backup_dir, "\n\n")
  
  # Show what will be backed up
  if (length(css_files) > 0) {
    cat("Files to backup:\n")
    for (i in seq_len(min(10, length(css_files)))) {
      cat(" -", css_files[i], "\n")
    }
    if (length(css_files) > 10) {
      cat(" ... and", length(css_files) - 10, "more files\n")
    }
  }
  
  # Backup each file
  for (css_file in css_files) {
    rel_path <- sub(projects_root, "", css_file, fixed = TRUE)
    backup_path <- file.path(backup_dir, rel_path)
    dir.create(dirname(backup_path), recursive = TRUE, showWarnings = FALSE)
    file.copy(css_file, backup_path)
  }
  
  cat("\nBackup complete!\n")
  cat("===================================\n")
  cat("BACKUP LOCATION:", backup_dir, "\n")
  cat("===================================\n")
  
  # Return the backup directory path (not invisible, so it prints)
  return(backup_dir)
}

#####  END OF BACKUP ALL CSS FILES FUNCTION  #####
```


## FUNCTION to Rename CSS Files (Preserves All Old Files and Content)

```{r}
#| label: safe-rename-css-preserve-all-function

# Function to convert Swart CSS files from the old naming system to the new naming system
# FROM: swart-20250709.css (dated names)
# TO: swart.css (simple name)
# NOTE: This only renames files, it does NOT update content

safe_rename_css_preserve_all <- function(projects_root = "/Users/D/R Working Directory",
                                        preserve_suffix = ".pre-renaming") {
  
  # Find all existing Swart CSS files
  dated_files <- list.files(projects_root, 
                           pattern = "swart-\\d{8}\\.css$", 
                           recursive = TRUE, 
                           full.names = TRUE)
  
  undated_files <- list.files(projects_root, 
                             pattern = "^swart\\.css$", 
                             recursive = TRUE, 
                             full.names = TRUE)
  
  # Exclude backup directories
  dated_files <- dated_files[!grepl("/css_backup", dated_files)]
  undated_files <- undated_files[!grepl("/css_backup", undated_files)]
  
  cat("Safe CSS Renaming (Preserve All)\n")
  cat("=================================\n")
  
  # Step 1: Preserve ALL existing files first
  cat("\nStep 1: Preserving ALL existing CSS files...\n")
  
  # Preserve undated files
  for (css_file in undated_files) {
    preserved_name <- paste0(css_file, preserve_suffix)
    file.copy(css_file, preserved_name)
    cat("  Preserved:", basename(css_file), "→", basename(preserved_name), "\n")
  }
  
  # Preserve dated files
  for (css_file in dated_files) {
    preserved_name <- paste0(css_file, preserve_suffix)
    file.copy(css_file, preserved_name)
    cat("  Preserved:", basename(css_file), "→", basename(preserved_name), "\n")
  }
  
  # Step 2: Now rename dated files to swart.css
  cat("\nStep 2: Renaming dated files to swart.css...\n")
  for (old_file in dated_files) {
    dir_path <- dirname(old_file)
    new_file <- file.path(dir_path, "swart.css")
    
    if (!file.exists(new_file)) {
      file.rename(old_file, new_file)
      cat("  Renamed:", basename(old_file), "→ swart.css\n")
    } else {
      # Remove the dated file since swart.css already exists
      file.remove(old_file)
      cat("  Removed:", basename(old_file), "(swart.css already exists)\n")
    }
    
    # Update R file references
    r_files <- list.files(dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
    for (r_file in r_files) {
      content <- readLines(r_file, warn = FALSE)
      old_name <- basename(old_file)
      content <- gsub(old_name, "swart.css", content, fixed = TRUE)
      writeLines(content, r_file)
    }
  }
  
  cat("\n=== Summary ===\n")
  cat("Preserved ALL", length(dated_files) + length(undated_files), "CSS files\n")
  cat("All originals saved with '", preserve_suffix, "' extension\n", sep = "")
}

#####  END OF Function to Rename CSS Files  #####

```

## FUNCTION to Update CSS Content (Run After Testing Rename)

```{r}
#| label: update-css-content-function

# Function to update all swart.css files with the latest content
# Run this AFTER you've tested that the renaming works
update_all_css_content <- function(master_css_path = "/Users/D/R Working Directory/swart.css",
                                   projects_root = "/Users/D/R Working Directory") {
  
  # Find all swart.css files
  css_files <- list.files(projects_root, 
                         pattern = "^swart\\.css$", 
                         recursive = TRUE, 
                         full.names = TRUE)
  
  # Exclude backup directories
  css_files <- css_files[!grepl("/css_backup", css_files)]
  
  cat("Updating CSS Content\n")
  cat("====================\n")
  cat("Master CSS:", master_css_path, "\n")
  cat("Found", length(css_files), "swart.css files to update\n\n")
  
  # Show first few files to be updated
  if (length(css_files) > 0) {
    cat("Files to update:\n")
    for (i in seq_len(min(5, length(css_files)))) {
      cat(" -", css_files[i], "\n")
    }
    if (length(css_files) > 5) {
      cat(" ... and", length(css_files) - 5, "more files\n")
    }
  }
  
  cat("\nUpdating...\n")
  updated <- 0
  for (css_file in css_files) {
    if (file.copy(master_css_path, css_file, overwrite = TRUE)) {
      updated <- updated + 1
    }
  }
  
  cat("\nUpdated", updated, "CSS files with master content\n")
}
```

## FUNCTION to Test if Projects Still Work

```{r}
#| label: test-css-function

# Function to help test if a project works with new CSS 
test_css_update <- function(project_dir) {
  css_file <- file.path(project_dir, "swart.css")
  preserved_file <- paste0(css_file, ".pre-renaming")
  
  if (file.exists(css_file)) {
    css_info <- file.info(css_file)
    
    cat("CSS Status for:", basename(project_dir), "\n")
    cat("  Current CSS: swart.css\n")
    cat("    Size:", css_info$size, "bytes\n")
    cat("    Modified:", format(css_info$mtime, "%Y-%m-%d %H:%M:%S"), "\n")
    
    if (file.exists(preserved_file)) {
      old_info <- file.info(preserved_file)
      cat("  Preserved CSS:", basename(preserved_file), "\n")
      cat("    Size:", old_info$size, "bytes\n")
      cat("    Modified:", format(old_info$mtime, "%Y-%m-%d %H:%M:%S"), "\n")
      cat("  Size difference:", css_info$size - old_info$size, "bytes\n")
      cat("\nTo revert if needed, run:\n")
      cat('  revert_css_renaming("', project_dir, '")\n', sep = "")
    }
  } else {
    cat("No swart.css file found in:", project_dir, "\n")
  }
}
```


## FUNCTION to Revert to Original CSS Files (If Needed)

```{r}
#| label: revert-function

# Function to revert to pre-renaming CSS if something breaks
revert_css_renaming <- function(project_dir, preserve_suffix = ".pre-renaming") {
  
  css_file <- file.path(project_dir, "swart.css")
  preserved_file <- paste0(css_file, preserve_suffix)
  
  if (file.exists(preserved_file)) {
    # Backup current (new) version
    file.copy(css_file, paste0(css_file, ".new-version"))
    
    # Restore preserved version
    file.copy(preserved_file, css_file, overwrite = TRUE)
    
    cat("Reverted to pre-renaming CSS in:", project_dir, "\n")
    cat("  New version saved as: swart.css.new-version\n")
    cat("  Restored from:", basename(preserved_file), "\n")
    
    return(TRUE)
  } else {
    cat("No preserved CSS file found in:", project_dir, "\n")
    return(FALSE)
  }
}
```

---

# Implementation Workflow


## Step 1: Backup Everything

```{r}
#| label: step-1-backup

backup_location <- backup_css_files()
cat("Backup saved to:", backup_location, "\n")
```

----

## Step 2: Rename Files (Preserves Original Content and CSS Files)

```{r}
#| label: step-2-rename

renaming_log <- safe_rename_css_preserve_all()

```

----


## Step 3: Test Projects with Renamed Files

Test a few key projects to ensure they work with the new filename (still using old CSS content):

```{r}
#| label: step-3-test-rename

# Test a specific project
test_css_update("/Users/D/R Working Directory/29-Years-of-Data-SCUC")

# Test more projects as needed
# test_css_update("/Users/D/R Working Directory/Another Project")

```



## Step 4: Update CSS Content (after confident all renames work)

**Important**: First rename your master CSS file from `swart-20250709.css` to `swart.css` in your R Working Directory!

```{r}
#| label: rename-master-css

# Manually rename your master CSS file first!
# file.rename("/Users/D/R Working Directory/swart-20250709.css", 
#             "/Users/D/R Working Directory/swart.css")
```


Then update all project CSS files with the latest content:

```{r}
#| label: step-4-update-content

# Only run this after you've confirmed the renaming works!
update_all_css_content(master_css_path = "/Users/D/R Working Directory/swart.css")
```

## Step 5: Test Projects with New Content

Test projects again to ensure they work with the updated CSS content:

```{r}
#| label: step-5-test-content

# Test the same projects with new content
test_css_update("/Users/D/R Working Directory/Honest Evaluation of Variables That Co-Vary")
```

## Step 6: Revert If Needed

If something breaks, revert specific projects:

```{r}
#| label: step-6-revert-if-needed

# revert_css_renaming("/Users/D/R Working Directory/YourProjectName")
```

## Step 7: Cleanup (After Everything Works)

After a testing period when you're confident everything works:

```{r}
#| label: step-7-cleanup

# ##### ONLY RUN THIS AFTER YOU'RE CONFIDENT EVERYTHING WORKS! #####
# 
# cleanup_preserved_files <- function(projects_root = "/Users/D/R Working Directory") {
#   preserved_files <- list.files(projects_root, 
#                                pattern = "\\.pre-renaming$", 
#                                recursive = TRUE, 
#                                full.names = TRUE)
#   cat("Found", length(preserved_files), "preserved files\n")
#   # file.remove(preserved_files)  # Uncomment when ready to delete
# }
```

---

# Future CSS Updates

## Set Up Update Function with Version Tracking

```{r}
#| label: setup-update-function

# Enhanced update function that tracks versions in R file comments
update_css_with_version_tracking <- function(master_css_path = "/Users/D/R Working Directory/swart.css", 
                                           projects_root_dir = "/Users/D/R Working Directory") {
  
  # Get modification time of master CSS
  mod_time <- file.info(master_css_path)$mtime
  version_string <- format(mod_time, "%Y%m%d-%H%M%S")
  formatted_date <- format(mod_time, "%Y-%m-%d %H:%M:%S")
  
  # Find all project directories
  project_dirs <- list.dirs(projects_root_dir, recursive = FALSE, full.names = TRUE)
  
  updated_count <- 0
  
  for (project_dir in project_dirs) {
    # Look for CSS in common locations
    css_locations <- c(
      file.path(project_dir, "swart.css"),
      file.path(project_dir, "www", "swart.css"),
      file.path(project_dir, "inst/www", "swart.css")
    )
    
    for (css_path in css_locations) {
      if (file.exists(css_path)) {
        file.copy(master_css_path, css_path, overwrite = TRUE)
        updated_count <- updated_count + 1
        
        # Update version comments in R files
        update_r_file_comments(project_dir, formatted_date, version_string)
      }
    }
  }
  
  cat("Updated", updated_count, "CSS files\n")
  cat("CSS Version:", version_string, "\n")
}

# Function to update comments in R files
update_r_file_comments <- function(project_dir, formatted_date, version_string) {
  r_files <- list.files(project_dir, pattern = "\\.R$", 
                        recursive = TRUE, full.names = TRUE)
  
  for (r_file in r_files) {
    content <- readLines(r_file)
    
    # Look for existing CSS version comments
    css_comment_pattern <- "^#\\s*CSS Version:"
    css_comment_line <- grep(css_comment_pattern, content)
    
    new_comment <- sprintf("# CSS Version: %s (Updated: %s)", 
                          version_string, formatted_date)
    
    if (length(css_comment_line) > 0) {
      # Update existing comment
      content[css_comment_line[1]] <- new_comment
    } else {
      # Add comment after first line
      if (length(content) > 0) {
        content <- c(content[1], new_comment, content[-1])
      }
    }
    
    writeLines(content, r_file)
  }
}
```

## Create Convenient Update Wrapper

```{r}
#| label: update-wrapper

# Simple function to update all CSS files
update_my_css <- function() {
  update_css_with_version_tracking(
    master_css_path = "/Users/D/R Working Directory/swart.css",
    projects_root_dir = "/Users/D/R Working Directory"
  )
  
  cat("All CSS files updated from master at", format(Sys.time()), "\n")
}

# Now you can simply run: update_my_css()
```

---

# Additional Version Tracking Options

## Option 1: Dynamic HTML Comments

```{r}
#| label: html-comments-version

# Function to include CSS with timestamp comment
include_css_with_timestamp <- function(css_path = "swart.css") {
  if (file.exists(css_path)) {
    mod_time <- file.info(css_path)$mtime
    formatted_time <- format(mod_time, "%Y-%m-%d %H:%M:%S")
    
    tagList(
      HTML(sprintf("<!-- CSS: %s last modified: %s -->", 
                   basename(css_path), formatted_time)),
      tags$link(rel = "stylesheet", href = css_path)
    )
  } else {
    warning("CSS file not found: ", css_path)
    NULL
  }
}

# Usage in Shiny UI
# ui <- fluidPage(
#   include_css_with_timestamp("swart.css"),
#   # ... rest of your UI
# )
```

## Option 2: Visible Version Info

```{r}
#| label: visible-version-info

# Function to create a version info tag
css_version_info <- function(css_path = "swart.css", 
                            show_in_production = FALSE) {
  
  if (!show_in_production && !interactive()) {
    return(NULL)
  }
  
  if (file.exists(css_path)) {
    mod_time <- file.info(css_path)$mtime
    formatted_time <- format(mod_time, "%Y-%m-%d %H:%M")
    
    tags$div(
      class = "css-version-info",
      style = "position: fixed; bottom: 5px; right: 5px; 
               font-size: 10px; color: #888; z-index: 9999;",
      paste("CSS:", formatted_time)
    )
  } else {
    NULL
  }
}

# Usage in Shiny
# ui <- fluidPage(
#   tags$link(rel = "stylesheet", href = "swart.css"),
#   css_version_info("swart.css", show_in_production = FALSE),
#   # ... rest of UI
# )
```

## Option 3: Metadata File Approach

```{r}
#| label: metadata-approach

# When updating CSS, also create a metadata file
update_css_with_metadata <- function(master_css_path = "/Users/D/R Working Directory/swart.css", 
                                    dest_dir) {
  # Copy CSS
  dest_css <- file.path(dest_dir, "swart.css")
  file.copy(master_css_path, dest_css, overwrite = TRUE)
  
  # Create metadata
  metadata <- list(
    original_file = basename(master_css_path),
    updated = Sys.time(),
    md5 = tools::md5sum(master_css_path),
    size = file.info(master_css_path)$size
  )
  
  # Save metadata
  saveRDS(metadata, file.path(dest_dir, "swart.css.meta"))
}

# Function to read version info
get_css_version <- function(css_dir = ".") {
  meta_file <- file.path(css_dir, "swart.css.meta")
  if (file.exists(meta_file)) {
    metadata <- readRDS(meta_file)
    format(metadata$updated, "%Y-%m-%d %H:%M:%S")
  } else {
    "Unknown"
  }
}

# Usage example
# cat("CSS Version:", get_css_version(), "\n")
```

---

# Quick Reference

After completing the setup, these are your main commands:

```{r}
#| label: quick-reference

# Update all CSS files from master
update_my_css()

# Test a specific project
test_css_update("/Users/D/R Working Directory/YourProjectName")

# Get CSS version info for current directory
get_css_version()

# Revert a project if needed
# revert_css_renaming("/Users/D/R Working Directory/YourProjectName")
```

---

# Alternative Approaches for Future Consideration

## URL-Based CSS (Best for Deployed Apps)

### GitHub Pages Implementation

```{r}
#| label: github-pages-setup

# In your HTML/Shiny UI, reference the CSS via URL
# Replace 'yourusername' with your actual GitHub username
# css_link <- '<link rel="stylesheet" href="https://yourusername.github.io/my-css-repo/swart.css">'

# For Shiny apps
# ui <- fluidPage(
#   tags$head(
#     tags$link(rel = "stylesheet", 
#               href = "https://yourusername.github.io/my-css-repo/swart.css")
#   ),
#   # ... rest of your UI
# )
```

### Hybrid Approach (Local Development + Production URL)

```{r}
#| label: hybrid-approach

# Function to conditionally load CSS based on environment
get_css_link <- function() {
  if (Sys.getenv("SHINY_PORT") != "" || interactive()) {
    # Local development - use local file
    tags$link(rel = "stylesheet", href = "swart.css")
  } else {
    # Production (deployed) - use URL
    tags$link(rel = "stylesheet", 
              href = "https://yourusername.github.io/css/swart.css")
  }
}

# Implementation in Shiny UI
# ui <- fluidPage(
#   tags$head(get_css_link()),
#   # ... rest of your UI
# )
```

### R Package Approach

```{r}
#| label: package-approach

# Create a minimal R package for your CSS
# Step 1: Create package structure
# usethis::create_package("~/swartcss")

# Step 2: Set up package directory structure
# dir.create("~/swartcss/inst/www", recursive = TRUE)
# file.copy("/Users/D/R Working Directory/swart.css", 
#           "~/swartcss/inst/www/swart.css")

# Step 3: Create package function (save as R/css.R in package)
# use_swart_css <- function() {
#   shiny::addResourcePath("swartcss", 
#                          system.file("www", package = "swartcss"))
#   shiny::tags$link(rel = "stylesheet", 
#                    href = "swartcss/swart.css")
# }

# Step 4: Usage in your projects
# library(swartcss)
# ui <- fluidPage(
#   use_swart_css(),
#   # ... rest of UI
# )
```
